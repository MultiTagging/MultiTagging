{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "elements": [
          {
            "type": "node",
            "name": "",
            "source_mapping": {
              "start": 417,
              "length": 5,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "owner_only",
                "source_mapping": {
                  "start": 363,
                  "length": 77,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "DNSResolver",
                    "source_mapping": {
                      "start": 188,
                      "length": 588,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "owner_only()"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected THROW ():\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n",
        "markdown": "Deprecated standard detected [THROW]():\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n",
        "first_markdown_element": "",
        "id": "f5556cf1c70b64b9e4b1fc32044dd970b5f2c8b9fc21b7971fda01971033f2d5",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [],
        "description": "solc-0.4.0 is not recommended for deployment\n",
        "markdown": "solc-0.4.0 is not recommended for deployment\n",
        "first_markdown_element": "",
        "id": "e676d9e89e623fa7675baecce41eb7ab21d1d8ec9e856bc5b047e6cfb50b37ca",
        "check": "solc-version",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "pragma",
            "name": "^0.4.0",
            "source_mapping": {
              "start": 0,
              "length": 23,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "directive": [
                "solidity",
                "^",
                "0.4",
                ".0"
              ]
            }
          }
        ],
        "description": "Pragma version^0.4.0 () allows old versions\n",
        "markdown": "Pragma version[^0.4.0]() allows old versions\n",
        "first_markdown_element": "",
        "id": "f4d0f96f990510a571c7ae954763f848d217d6f86fa5953d251f28f5221969e2",
        "check": "solc-version",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "owner_only",
            "source_mapping": {
              "start": 363,
              "length": 77,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "DNSResolver",
                "source_mapping": {
                  "start": 188,
                  "length": 588,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "owner_only()"
            },
            "additional_fields": {
              "target": "modifier",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Modifier DNSResolver.owner_only() () is not in mixedCase\n",
        "markdown": "Modifier [DNSResolver.owner_only()]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "897b18f27f50c195eec7d6268a4ab94a5b895e1e6d7e863aff8658d890325cbf",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "OwnedResolver",
            "source_mapping": {
              "start": 293,
              "length": 60,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "DNSResolver",
                "source_mapping": {
                  "start": 188,
                  "length": 588,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "OwnedResolver()"
            },
            "additional_fields": {
              "target": "function",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Function DNSResolver.OwnedResolver() () is not in mixedCase\n",
        "markdown": "Function [DNSResolver.OwnedResolver()]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "db0326348f23893675d2eba8a526b6ebce9047b37f4d7effb4b1dc99db5cdb2c",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "setDnsrr",
            "source_mapping": {
              "start": 684,
              "length": 90,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "DNSResolver",
                "source_mapping": {
                  "start": 188,
                  "length": 588,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "setDnsrr(bytes32,bytes)"
            }
          }
        ],
        "description": "setDnsrr(bytes32,bytes) should be declared external:\n\t- DNSResolver.setDnsrr(bytes32,bytes) ()\n",
        "markdown": "setDnsrr(bytes32,bytes) should be declared external:\n\t- [DNSResolver.setDnsrr(bytes32,bytes)]()\n",
        "first_markdown_element": "",
        "id": "9b3d24dcca2cb2176bb95c673c5bb60354470f4c009a62e969c4d82b37a9d13d",
        "check": "external-function",
        "impact": "Optimization",
        "confidence": "High"
      }
    ]
  }
}