{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "elements": [
          {
            "type": "contract",
            "name": "PromissoryToken",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            }
          },
          {
            "type": "node",
            "name": "backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank))",
            "source_mapping": {
              "start": 8309,
              "length": 117,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken () contract sets array length with a user-controlled value:\n\t- backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank)) ()\n",
        "markdown": "[PromissoryToken]() contract sets array length with a user-controlled value:\n\t- [backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank))]()\n",
        "first_markdown_element": "",
        "id": "03a41d98cf6f19bc1562971aa304b5af50ee5276f29cfae3a0aeceaf411b0329",
        "check": "controlled-array-length",
        "impact": "High",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "contract",
            "name": "PromissoryToken",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            }
          },
          {
            "type": "node",
            "name": "backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0))",
            "source_mapping": {
              "start": 10941,
              "length": 98,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claim",
                "source_mapping": {
                  "start": 10285,
                  "length": 900,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claim()"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken () contract sets array length with a user-controlled value:\n\t- backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0)) ()\n",
        "markdown": "[PromissoryToken]() contract sets array length with a user-controlled value:\n\t- [backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0))]()\n",
        "first_markdown_element": "",
        "id": "642d27b12bd4fc26c77e8a8b6d0bfc1977f27ed72ac7525d7deeade312a07745",
        "check": "controlled-array-length",
        "impact": "High",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "contract",
            "name": "PromissoryToken",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            }
          },
          {
            "type": "node",
            "name": "previousFounders.push(founder)",
            "source_mapping": {
              "start": 6945,
              "length": 30,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderApproveSwitchRequest",
                "source_mapping": {
                  "start": 6675,
                  "length": 411,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderApproveSwitchRequest(address,bytes32)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken () contract sets array length with a user-controlled value:\n\t- previousFounders.push(founder) ()\n",
        "markdown": "[PromissoryToken]() contract sets array length with a user-controlled value:\n\t- [previousFounders.push(founder)]()\n",
        "first_markdown_element": "",
        "id": "f1b18b66ff2ce7d6cc7cef77648181e3fc05ddac7389c5523f00b41813dc9403",
        "check": "controlled-array-length",
        "impact": "High",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "contract",
            "name": "PromissoryToken",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            }
          },
          {
            "type": "node",
            "name": "withdrawals[_withdrawalID].backerApprovals.push(msg.sender)",
            "source_mapping": {
              "start": 12802,
              "length": 59,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken () contract sets array length with a user-controlled value:\n\t- withdrawals[_withdrawalID].backerApprovals.push(msg.sender) ()\n",
        "markdown": "[PromissoryToken]() contract sets array length with a user-controlled value:\n\t- [withdrawals[_withdrawalID].backerApprovals.push(msg.sender)]()\n",
        "first_markdown_element": "",
        "id": "f5855b861fe38fbd7ab27ecca877a74717a2840b26ed71b1c34d88864ef94184",
        "check": "controlled-array-length",
        "impact": "High",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_newCofounderAddr",
            "source_mapping": {
              "start": 4945,
              "length": 25,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderSwitchAddress",
                "source_mapping": {
                  "start": 4913,
                  "length": 254,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderSwitchAddress(address)"
                }
              }
            }
          },
          {
            "type": "node",
            "name": "cofounder = _newCofounderAddr",
            "source_mapping": {
              "start": 5058,
              "length": 29,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderSwitchAddress",
                "source_mapping": {
                  "start": 4913,
                  "length": 254,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderSwitchAddress(address)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.cofounderSwitchAddress(address)._newCofounderAddr () lacks a zero-check on :\n\t\t- cofounder = _newCofounderAddr ()\n",
        "markdown": "[PromissoryToken.cofounderSwitchAddress(address)._newCofounderAddr]() lacks a zero-check on :\n\t\t- [cofounder = _newCofounderAddr]()\n",
        "first_markdown_element": "",
        "id": "15ee1257605aea24cece29314c1be9b3d27c09991c776258c712083b54f73d1b",
        "check": "missing-zero-check",
        "impact": "Low",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_cofounderAddress",
            "source_mapping": {
              "start": 4371,
              "length": 25,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 4323,
                  "length": 250,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "PromissoryToken(bytes32,address,uint256)"
                }
              }
            }
          },
          {
            "type": "node",
            "name": "cofounder = _cofounderAddress",
            "source_mapping": {
              "start": 4499,
              "length": 29,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 4323,
                  "length": 250,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "PromissoryToken(bytes32,address,uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.PromissoryToken(bytes32,address,uint256)._cofounderAddress () lacks a zero-check on :\n\t\t- cofounder = _cofounderAddress ()\n",
        "markdown": "[PromissoryToken.PromissoryToken(bytes32,address,uint256)._cofounderAddress]() lacks a zero-check on :\n\t\t- [cofounder = _cofounderAddress]()\n",
        "first_markdown_element": "",
        "id": "90494492f6fec33283167a0a29911a129aa5bcb34a356269f91b4978a2866014",
        "check": "missing-zero-check",
        "impact": "Low",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "approveWithdraw",
            "source_mapping": {
              "start": 12463,
              "length": 1604,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "approveWithdraw(uint256)"
            }
          },
          {
            "type": "node",
            "name": "! withdrawals[_withdrawalID].destination[i].send(amountPerAddr)",
            "source_mapping": {
              "start": 13730,
              "length": 62,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.approveWithdraw(uint256) () has external calls inside a loop: ! withdrawals[_withdrawalID].destination[i].send(amountPerAddr) ()\n",
        "markdown": "[PromissoryToken.approveWithdraw(uint256)]() has external calls inside a loop: [! withdrawals[_withdrawalID].destination[i].send(amountPerAddr)]()\n",
        "first_markdown_element": "",
        "id": "f9629e3d15c0a92d98602a7d1675d03a725c8b6a91999e967b47d597f5a2c036",
        "check": "calls-loop",
        "impact": "Low",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "redeem",
            "source_mapping": {
              "start": 15377,
              "length": 660,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "redeem(uint256,address)"
            }
          },
          {
            "type": "node",
            "name": "backers[_backerAddr][i].claimed == false",
            "source_mapping": {
              "start": 15644,
              "length": 40,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "redeem",
                "source_mapping": {
                  "start": 15377,
                  "length": 660,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "redeem(uint256,address)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.redeem(uint256,address) () compares to a boolean constant:\n\t-backers[_backerAddr][i].claimed == false ()\n",
        "markdown": "[PromissoryToken.redeem(uint256,address)]() compares to a boolean constant:\n\t-[backers[_backerAddr][i].claimed == false]()\n",
        "first_markdown_element": "",
        "id": "1d7b7a80149bebd9e9584c938a7610838302dbb476784c4fa93e49c578fe36d8",
        "check": "boolean-equal",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "backerCheck",
            "source_mapping": {
              "start": 17284,
              "length": 208,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "backerCheck(uint256)"
            }
          },
          {
            "type": "node",
            "name": "backers[msg.sender].length == 0 || withdrawals[_withdrawalID].spent == true || withdrawalsVotes[msg.sender][_withdrawalID] == true",
            "source_mapping": {
              "start": 17337,
              "length": 130,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "backerCheck",
                "source_mapping": {
                  "start": 17284,
                  "length": 208,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "backerCheck(uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.backerCheck(uint256) () compares to a boolean constant:\n\t-backers[msg.sender].length == 0 || withdrawals[_withdrawalID].spent == true || withdrawalsVotes[msg.sender][_withdrawalID] == true ()\n",
        "markdown": "[PromissoryToken.backerCheck(uint256)]() compares to a boolean constant:\n\t-[backers[msg.sender].length == 0 || withdrawals[_withdrawalID].spent == true || withdrawalsVotes[msg.sender][_withdrawalID] == true]()\n",
        "first_markdown_element": "",
        "id": "430971bdf71e0abca8ebc4308e70689ce46fb355313447d5097d49efe4808db2",
        "check": "boolean-equal",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "redeem",
            "source_mapping": {
              "start": 15377,
              "length": 660,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "redeem(uint256,address)"
            }
          },
          {
            "type": "node",
            "name": "backersRedeemed[_backerAddr] == true",
            "source_mapping": {
              "start": 15455,
              "length": 36,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "redeem",
                "source_mapping": {
                  "start": 15377,
                  "length": 660,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "redeem(uint256,address)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.redeem(uint256,address) () compares to a boolean constant:\n\t-backersRedeemed[_backerAddr] == true ()\n",
        "markdown": "[PromissoryToken.redeem(uint256,address)]() compares to a boolean constant:\n\t-[backersRedeemed[_backerAddr] == true]()\n",
        "first_markdown_element": "",
        "id": "7dd3298c3fe2f2ee9ee974bfa6c276d9d89e6f81db4e982b8cbbcdd7fd4e9b87",
        "check": "boolean-equal",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "claimPrepaid",
            "source_mapping": {
              "start": 9199,
              "length": 849,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
            }
          },
          {
            "type": "node",
            "name": "backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank",
            "source_mapping": {
              "start": 9380,
              "length": 406,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256) () compares to a boolean constant:\n\t-backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank ()\n",
        "markdown": "[PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)]() compares to a boolean constant:\n\t-[backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank]()\n",
        "first_markdown_element": "",
        "id": "81fb3e9895a41577ed8721d15b9116e273622c24d9c004cd60b2c4968b9edb87",
        "check": "boolean-equal",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "approveWithdraw",
            "source_mapping": {
              "start": 12463,
              "length": 1604,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "approveWithdraw(uint256)"
            }
          },
          {
            "type": "node",
            "name": "isMultiPayment == false",
            "source_mapping": {
              "start": 13265,
              "length": 23,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.approveWithdraw(uint256) () compares to a boolean constant:\n\t-isMultiPayment == false ()\n",
        "markdown": "[PromissoryToken.approveWithdraw(uint256)]() compares to a boolean constant:\n\t-[isMultiPayment == false]()\n",
        "first_markdown_element": "",
        "id": "a666c1547f9148d3198413c638bce55c8dbff759916c056c9ee0c16d48e2b123",
        "check": "boolean-equal",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "sha3()(_founderHash) != founderHash",
            "source_mapping": {
              "start": 5871,
              "length": 33,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "founderSwitchRequest",
                "source_mapping": {
                  "start": 5754,
                  "length": 320,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "founderSwitchRequest(bytes32,bytes32)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected sha3()(_founderHash) != founderHash ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [sha3()(_founderHash) != founderHash]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "0f629f8aafafee0644c5d8098801b96ae4096e97517539a658d793b32ad9a43b",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank",
            "source_mapping": {
              "start": 9380,
              "length": 406,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [backers[msg.sender][_index].prepaid == true && backers[msg.sender][_index].claimed == false && backers[msg.sender][_index].tokenAmount == _tokenAmount && backers[msg.sender][_index].tokenPrice == _boughtTokensPrice && backers[msg.sender][_index].privateHash == sha3()(_privatePhrase,msg.sender) && backers[msg.sender][_index].backerRank == _backerRank]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "214c5a3fae778d9f3e529e2c30d5c12e2abc666dcce4fb76f9f1915b33c0e725",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "founderHash = sha3()(_founderHash)",
            "source_mapping": {
              "start": 4457,
              "length": 32,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 4323,
                  "length": 250,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "PromissoryToken(bytes32,address,uint256)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected founderHash = sha3()(_founderHash) ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [founderHash = sha3()(_founderHash)]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "55c1c20139a17db5e6620ae251494d4941a2c29db7879eb85c918a4e5cf83e0d",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "msg.sender != cofounder || sha3()(_newFounderAddr,founderHash,_oneTimesharedPhrase) != tempHashes[_newFounderAddr]",
            "source_mapping": {
              "start": 6813,
              "length": 114,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderApproveSwitchRequest",
                "source_mapping": {
                  "start": 6675,
                  "length": 411,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderApproveSwitchRequest(address,bytes32)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected msg.sender != cofounder || sha3()(_newFounderAddr,founderHash,_oneTimesharedPhrase) != tempHashes[_newFounderAddr] ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [msg.sender != cofounder || sha3()(_newFounderAddr,founderHash,_oneTimesharedPhrase) != tempHashes[_newFounderAddr]]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "95759481909cad81fbb01ddf95b2a49ab32d63ad89d12dd3401efbb5777b5279",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0))",
            "source_mapping": {
              "start": 10941,
              "length": 98,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claim",
                "source_mapping": {
                  "start": 10285,
                  "length": 900,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claim()"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0)) ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [backers[msg.sender].push(backerData(discountPrice,tokenAmount,sha3()(msg.sender),false,true,0))]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "a270e42a647552fd0ef9b3395cd71ab7cc91358bd23f35f1b4f06858e8ed0d43",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "tempHashes[msg.sender] = sha3()(msg.sender,founderHash,_oneTimesharedPhrase)",
            "source_mapping": {
              "start": 5922,
              "length": 76,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "founderSwitchRequest",
                "source_mapping": {
                  "start": 5754,
                  "length": 320,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "founderSwitchRequest(bytes32,bytes32)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected tempHashes[msg.sender] = sha3()(msg.sender,founderHash,_oneTimesharedPhrase) ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [tempHashes[msg.sender] = sha3()(msg.sender,founderHash,_oneTimesharedPhrase)]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "b37718284106973e6db63e5e169f8aaf3577da172878cccee0f32d1da33a58f7",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank))",
            "source_mapping": {
              "start": 8309,
              "length": 117,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank)) ():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "markdown": "Deprecated standard detected [backers[_backer].push(backerData(_tokenPrice,_tokenAmount,sha3()(_privatePhrase,_backer),true,false,_backerRank))]():\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n",
        "first_markdown_element": "",
        "id": "b552f743d3131177c0c0ad95228f0ad9ab3c2a5004c4af66711d14d7001f1bc7",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "node",
            "name": "",
            "source_mapping": {
              "start": 5042,
              "length": 5,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderSwitchAddress",
                "source_mapping": {
                  "start": 4913,
                  "length": 254,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderSwitchAddress(address)"
                }
              }
            }
          }
        ],
        "description": "Deprecated standard detected THROW ():\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n",
        "markdown": "Deprecated standard detected [THROW]():\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n",
        "first_markdown_element": "",
        "id": "f5556cf1c70b64b9e4b1fc32044dd970b5f2c8b9fc21b7971fda01971033f2d5",
        "check": "deprecated-standards",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "pragma",
            "name": "^0.4.8",
            "source_mapping": {
              "start": 0,
              "length": 23,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "directive": [
                "solidity",
                "^",
                "0.4",
                ".8"
              ]
            }
          }
        ],
        "description": "Pragma version^0.4.8 () allows old versions\n",
        "markdown": "Pragma version[^0.4.8]() allows old versions\n",
        "first_markdown_element": "",
        "id": "dd43bca9b08bc1fa7b94a3e619671f3c2c98a72b8b3bf0caf1e1f86665ec4569",
        "check": "solc-version",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [],
        "description": "solc-0.4.8 is not recommended for deployment\n",
        "markdown": "solc-0.4.8 is not recommended for deployment\n",
        "first_markdown_element": "",
        "id": "ebbd8e423b3c73a93e118f8daed7c9ac33b0d525351f79b5ea41076caa3c1bc5",
        "check": "solc-version",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_tokenAmount",
            "source_mapping": {
              "start": 7783,
              "length": 17,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._tokenAmount () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._tokenAmount]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "0e22b3fe16d5a32eb9a3055be1f95f3b32cc7731ab7b0dbb33621402ac5dbab5",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_newFounderAddr",
            "source_mapping": {
              "start": 6714,
              "length": 23,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderApproveSwitchRequest",
                "source_mapping": {
                  "start": 6675,
                  "length": 411,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderApproveSwitchRequest(address,bytes32)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.cofounderApproveSwitchRequest(address,bytes32)._newFounderAddr () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.cofounderApproveSwitchRequest(address,bytes32)._newFounderAddr]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "115f9ed786e8368d581b1a24dd25852aa51df87bc074b53f0a195993910791e7",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_tokenPrice",
            "source_mapping": {
              "start": 7765,
              "length": 16,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._tokenPrice () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._tokenPrice]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "36d0a086f55d4317b5e2a3969297a926e7fc953340daec17096ad897863b75fd",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_backerRank",
            "source_mapping": {
              "start": 9301,
              "length": 16,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._backerRank () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._backerRank]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "387065448d7e9bb055cf2fb1cb8cef16896b94ebd16928505cecfc4bf7bc5b8f",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_privatePhrase",
            "source_mapping": {
              "start": 7802,
              "length": 21,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._privatePhrase () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._privatePhrase]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "3be74f12542e42110acc33895d25931c2b32f62d20acc293f38a48c393f732ff",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_backerAddress",
            "source_mapping": {
              "start": 11861,
              "length": 22,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "checkBalance",
                "source_mapping": {
                  "start": 11839,
                  "length": 417,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "checkBalance(address,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.checkBalance(address,uint256)._backerAddress () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.checkBalance(address,uint256)._backerAddress]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "3cd0be0094f208568039feefbb70aa43acdeda494da90dcb2626931743f536ce",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_privatePhrase",
            "source_mapping": {
              "start": 9278,
              "length": 21,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._privatePhrase () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._privatePhrase]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "449f0bfec32ed8afcd0372ed61e665fcd2b2c3b5fdc209ff8a2c2ddb2c079a2a",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_tokenAmount",
            "source_mapping": {
              "start": 9259,
              "length": 17,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._tokenAmount () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._tokenAmount]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "48b9caf30a69115faf6d3482cc400f87c42be6e9b933e112417ba75f1c652b75",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "EarliestBackersSet",
            "source_mapping": {
              "start": 17498,
              "length": 100,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "EarliestBackersSet()"
            },
            "additional_fields": {
              "target": "modifier",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Modifier PromissoryToken.EarliestBackersSet() () is not in mixedCase\n",
        "markdown": "Modifier [PromissoryToken.EarliestBackersSet()]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "6c778c7bf9c8d880d27803db3cc1cf7433706ffd575be8a6afb60b4c3bccd64f",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_oneTimesharedPhrase",
            "source_mapping": {
              "start": 6739,
              "length": 28,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderApproveSwitchRequest",
                "source_mapping": {
                  "start": 6675,
                  "length": 411,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderApproveSwitchRequest(address,bytes32)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.cofounderApproveSwitchRequest(address,bytes32)._oneTimesharedPhrase () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.cofounderApproveSwitchRequest(address,bytes32)._oneTimesharedPhrase]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "75e3deee41fc952559cf43246cdf033f3fd8ceb769c7f237fc2bb7165f1dac10",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_backerRank",
            "source_mapping": {
              "start": 7825,
              "length": 16,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._backerRank () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._backerRank]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "89402efb0d86e88a01baf4cada8f6eeaa9e7f4b629b6b3ca4d18213212bb6948",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_oneTimesharedPhrase",
            "source_mapping": {
              "start": 5806,
              "length": 28,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "founderSwitchRequest",
                "source_mapping": {
                  "start": 5754,
                  "length": 320,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "founderSwitchRequest(bytes32,bytes32)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.founderSwitchRequest(bytes32,bytes32)._oneTimesharedPhrase () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.founderSwitchRequest(bytes32,bytes32)._oneTimesharedPhrase]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "8d2b77ee137543d56a906fb7d3812d540a8735c3da4eabe5ed4a347fc3b9f3e8",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "struct",
            "name": "withdrawalData",
            "source_mapping": {
              "start": 3437,
              "length": 199,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            },
            "additional_fields": {
              "target": "structure",
              "convention": "CapWords"
            }
          }
        ],
        "description": "Struct PromissoryToken.withdrawalData () is not in CapWords\n",
        "markdown": "Struct [PromissoryToken.withdrawalData]() is not in CapWords\n",
        "first_markdown_element": "",
        "id": "98c57a14e1dedd0276be952113418a27d689cd8bdd1abba2eefcac3ad0fc6a44",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_backerAddr",
            "source_mapping": {
              "start": 15407,
              "length": 19,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "redeem",
                "source_mapping": {
                  "start": 15377,
                  "length": 660,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "redeem(uint256,address)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.redeem(uint256,address)._backerAddr () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.redeem(uint256,address)._backerAddr]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "9c1a024c2a0adb4d272b4629ca54a80621ea280422499704dce44b8ed246dd15",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_reason",
            "source_mapping": {
              "start": 14479,
              "length": 13,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "withdraw",
                "source_mapping": {
                  "start": 14442,
                  "length": 566,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "withdraw(uint256,bytes,address[])"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.withdraw(uint256,bytes,address[])._reason () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.withdraw(uint256,bytes,address[])._reason]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "9d2f73dff8a03788ae62fc692c7a4b8cf126edc0fccacdb693ac8012ac8f50ca",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_boughtTokensPrice",
            "source_mapping": {
              "start": 9234,
              "length": 23,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._boughtTokensPrice () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._boughtTokensPrice]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "a5263def9770c303f2d0eb8560ba84b34345bad7964b330519a45313461418fd",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_newCofounderAddr",
            "source_mapping": {
              "start": 4945,
              "length": 25,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "cofounderSwitchAddress",
                "source_mapping": {
                  "start": 4913,
                  "length": 254,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "cofounderSwitchAddress(address)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.cofounderSwitchAddress(address)._newCofounderAddr () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.cofounderSwitchAddress(address)._newCofounderAddr]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "bee62a72c30c98b21d58bf93d0bf0ec4a1ae86502fb2919eb7ad2fad93e6ac86",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_totalAmount",
            "source_mapping": {
              "start": 14460,
              "length": 17,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "withdraw",
                "source_mapping": {
                  "start": 14442,
                  "length": 566,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "withdraw(uint256,bytes,address[])"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.withdraw(uint256,bytes,address[])._totalAmount () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.withdraw(uint256,bytes,address[])._totalAmount]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "c0a3d45fb3b4bb5b6ca352fff1215a50fa65b6ae77a55316e64cad8df762ac09",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_destination",
            "source_mapping": {
              "start": 14494,
              "length": 22,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "withdraw",
                "source_mapping": {
                  "start": 14442,
                  "length": 566,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "withdraw(uint256,bytes,address[])"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.withdraw(uint256,bytes,address[])._destination () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.withdraw(uint256,bytes,address[])._destination]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "c985a14ad172d000ac86a557d4393a6938945b3fbf7a0b4a11266926f7dc3bd8",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_founderHash",
            "source_mapping": {
              "start": 5784,
              "length": 20,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "founderSwitchRequest",
                "source_mapping": {
                  "start": 5754,
                  "length": 320,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "founderSwitchRequest(bytes32,bytes32)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.founderSwitchRequest(bytes32,bytes32)._founderHash () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.founderSwitchRequest(bytes32,bytes32)._founderHash]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "cd2eb259579bad1d4d055ff8c29c96194db0a68d1d3280fcb6a9a3ac5f929dc9",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_amount",
            "source_mapping": {
              "start": 15393,
              "length": 12,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "redeem",
                "source_mapping": {
                  "start": 15377,
                  "length": 660,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "redeem(uint256,address)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.redeem(uint256,address)._amount () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.redeem(uint256,address)._amount]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "da7365c819ce9fd71b3225ddb50b6e05c12da10b727d3530a3b3445256cfa2a5",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_index",
            "source_mapping": {
              "start": 9221,
              "length": 11,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "claimPrepaid",
                "source_mapping": {
                  "start": 9199,
                  "length": 849,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "claimPrepaid(uint256,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._index () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.claimPrepaid(uint256,uint256,uint256,string,uint256)._index]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "e18ffb1b485550b0155bb0b331318a60e7f6b684693a95d44e04c75e8d04d36b",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_withdrawalID",
            "source_mapping": {
              "start": 16774,
              "length": 18,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "getWithdrawalData",
                "source_mapping": {
                  "start": 16747,
                  "length": 445,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "getWithdrawalData(uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.getWithdrawalData(uint256)._withdrawalID () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.getWithdrawalData(uint256)._withdrawalID]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "e783d277b32f24c58940d496876a5b871d77025b4f6f9f6bdb1940088517dd77",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "struct",
            "name": "backerData",
            "source_mapping": {
              "start": 2980,
              "length": 168,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            },
            "additional_fields": {
              "target": "structure",
              "convention": "CapWords"
            }
          }
        ],
        "description": "Struct PromissoryToken.backerData () is not in CapWords\n",
        "markdown": "Struct [PromissoryToken.backerData]() is not in CapWords\n",
        "first_markdown_element": "",
        "id": "e9cb0ff9cb64d4a45707e82e87a18bf9e4bae14b97dfb84a4567a0bbf9192ca6",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_withdrawalID",
            "source_mapping": {
              "start": 12488,
              "length": 18,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.approveWithdraw(uint256)._withdrawalID () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.approveWithdraw(uint256)._withdrawalID]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "ea59e4db8ab30a27b7aee5355f79c4bea5c6e046e543aa4114992af8d66376b3",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "MinimumBackersClaimed",
            "source_mapping": {
              "start": 17604,
              "length": 232,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "MinimumBackersClaimed()"
            },
            "additional_fields": {
              "target": "modifier",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Modifier PromissoryToken.MinimumBackersClaimed() () is not in mixedCase\n",
        "markdown": "Modifier [PromissoryToken.MinimumBackersClaimed()]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "ea5c3a160f1e976d12f52c0c57ed69d288ea2fd0b09fa8609e1a9641e252b007",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "_backer",
            "source_mapping": {
              "start": 7748,
              "length": 15,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "setPrepaid",
                "source_mapping": {
                  "start": 7728,
                  "length": 920,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "setPrepaid(address,uint256,uint256,string,uint256)"
                }
              }
            },
            "additional_fields": {
              "target": "parameter",
              "convention": "mixedCase"
            }
          }
        ],
        "description": "Parameter PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._backer () is not in mixedCase\n",
        "markdown": "Parameter [PromissoryToken.setPrepaid(address,uint256,uint256,string,uint256)._backer]() is not in mixedCase\n",
        "first_markdown_element": "",
        "id": "fb5a18eeabfb000a9da67fb0ffc6664c6fb8fa92fbd82efc161b093ee0a4e2f8",
        "check": "naming-convention",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "approveWithdraw",
            "source_mapping": {
              "start": 12463,
              "length": 1604,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "approveWithdraw(uint256)"
            }
          },
          {
            "type": "node",
            "name": "! withdrawals[_withdrawalID].destination[i].send(amountPerAddr)",
            "source_mapping": {
              "start": 13730,
              "length": 62,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            },
            "additional_fields": {
              "underlying_type": "external_calls"
            }
          },
          {
            "type": "node",
            "name": "WithdrawalApproved(_withdrawalID,withdrawals[_withdrawalID].totalStake,isMultiPayment,withdrawals[_withdrawalID].Amount,withdrawals[_withdrawalID].reason)",
            "source_mapping": {
              "start": 13828,
              "length": 222,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "approveWithdraw",
                "source_mapping": {
                  "start": 12463,
                  "length": 1604,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "approveWithdraw(uint256)"
                }
              }
            },
            "additional_fields": {
              "underlying_type": "event"
            }
          }
        ],
        "description": "Reentrancy in PromissoryToken.approveWithdraw(uint256) ():\n\tExternal calls:\n\t- ! withdrawals[_withdrawalID].destination[i].send(amountPerAddr) ()\n\tEvent emitted after the call(s):\n\t- WithdrawalApproved(_withdrawalID,withdrawals[_withdrawalID].totalStake,isMultiPayment,withdrawals[_withdrawalID].Amount,withdrawals[_withdrawalID].reason) ()\n",
        "markdown": "Reentrancy in [PromissoryToken.approveWithdraw(uint256)]():\n\tExternal calls:\n\t- [! withdrawals[_withdrawalID].destination[i].send(amountPerAddr)]()\n\tEvent emitted after the call(s):\n\t- [WithdrawalApproved(_withdrawalID,withdrawals[_withdrawalID].totalStake,isMultiPayment,withdrawals[_withdrawalID].Amount,withdrawals[_withdrawalID].reason)]()\n",
        "first_markdown_element": "",
        "id": "4d37371284c015aaf27c70b8eb0f8af915ebd330d7cc9860ad50337f4c31c020",
        "check": "reentrancy-unlimited-gas",
        "impact": "Informational",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "function",
            "name": "slitherConstructorVariables",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              },
              "signature": "slitherConstructorVariables()"
            }
          },
          {
            "type": "node",
            "name": "promissoryUnits = 3000000",
            "source_mapping": {
              "start": 2391,
              "length": 37,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "function",
                "name": "slitherConstructorVariables",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                },
                "type_specific_fields": {
                  "parent": {
                    "type": "contract",
                    "name": "PromissoryToken",
                    "source_mapping": {
                      "start": 941,
                      "length": 17109,
                      "filename_relative": "",
                      "filename_absolute": "",
                      "filename_short": "",
                      "is_dependency": false,
                      "lines": [],
                      "starting_column": 0,
                      "ending_column": 0
                    }
                  },
                  "signature": "slitherConstructorVariables()"
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.slitherConstructorVariables() () uses literals with too many digits:\n\t- promissoryUnits = 3000000 ()\n",
        "markdown": "[PromissoryToken.slitherConstructorVariables()]() uses literals with too many digits:\n\t- [promissoryUnits = 3000000]()\n",
        "first_markdown_element": "",
        "id": "b8dc5cfc7233dc6910337d32a92eca11900bae8162fcf77691b4a858289dc2ad",
        "check": "too-many-digits",
        "impact": "Informational",
        "confidence": "Medium"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "redeemedTokens",
            "source_mapping": {
              "start": 2732,
              "length": 30,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          },
          {
            "type": "contract",
            "name": "PromissoryToken",
            "source_mapping": {
              "start": 941,
              "length": 17109,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            }
          }
        ],
        "description": "PromissoryToken.redeemedTokens () is never used in PromissoryToken ()\n",
        "markdown": "[PromissoryToken.redeemedTokens]() is never used in [PromissoryToken]()\n",
        "first_markdown_element": "",
        "id": "4383164f68a5da32223f4a4779d14944e11cd4f12be8adf401be5347fce5c508",
        "check": "unused-state",
        "impact": "Informational",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "divisor",
            "source_mapping": {
              "start": 2265,
              "length": 27,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.divisor () should be constant \n",
        "markdown": "[PromissoryToken.divisor]() should be constant \n",
        "first_markdown_element": "",
        "id": "06bf158990c4169649cf5b3e4fc6a2c0ebfc39f0854c6153e8756090cb773ef5",
        "check": "constable-states",
        "impact": "Optimization",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "redeemedTokens",
            "source_mapping": {
              "start": 2732,
              "length": 30,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.redeemedTokens () should be constant \n",
        "markdown": "[PromissoryToken.redeemedTokens]() should be constant \n",
        "first_markdown_element": "",
        "id": "41d0c751dc1143096b9acbb1036f17cd6157f83545baf0da84505bfdde55a7ee",
        "check": "constable-states",
        "impact": "Optimization",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "promissoryUnits",
            "source_mapping": {
              "start": 2391,
              "length": 37,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.promissoryUnits () should be constant \n",
        "markdown": "[PromissoryToken.promissoryUnits]() should be constant \n",
        "first_markdown_element": "",
        "id": "e58b1d556ed9e8617517f2881a491a6586883d38117eeae63927bbcc582bf5b3",
        "check": "constable-states",
        "impact": "Optimization",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "minimumPrepaidClaimedPercent",
            "source_mapping": {
              "start": 2331,
              "length": 54,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.minimumPrepaidClaimedPercent () should be constant \n",
        "markdown": "[PromissoryToken.minimumPrepaidClaimedPercent]() should be constant \n",
        "first_markdown_element": "",
        "id": "e9384fe50869e8e24e828edd4095d0bec3b8d20eadcc93e456ef4cc4f6396679",
        "check": "constable-states",
        "impact": "Optimization",
        "confidence": "High"
      },
      {
        "elements": [
          {
            "type": "variable",
            "name": "discountAmount",
            "source_mapping": {
              "start": 2208,
              "length": 33,
              "filename_relative": "",
              "filename_absolute": "",
              "filename_short": "",
              "is_dependency": false,
              "lines": [],
              "starting_column": 0,
              "ending_column": 0
            },
            "type_specific_fields": {
              "parent": {
                "type": "contract",
                "name": "PromissoryToken",
                "source_mapping": {
                  "start": 941,
                  "length": 17109,
                  "filename_relative": "",
                  "filename_absolute": "",
                  "filename_short": "",
                  "is_dependency": false,
                  "lines": [],
                  "starting_column": 0,
                  "ending_column": 0
                }
              }
            }
          }
        ],
        "description": "PromissoryToken.discountAmount () should be constant \n",
        "markdown": "[PromissoryToken.discountAmount]() should be constant \n",
        "first_markdown_element": "",
        "id": "fb083edc912d26ed7629ec8082b861125521ea4b0cd5d7cc11326acc764a48bb",
        "check": "constable-states",
        "impact": "Optimization",
        "confidence": "High"
      }
    ]
  }
}