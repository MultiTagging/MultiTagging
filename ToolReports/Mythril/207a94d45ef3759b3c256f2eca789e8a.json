[{"issues": [{"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 46608686, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b6001600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbf3f493c772c8c283fd124432c2d0f539ab343faa04258fe88e52912d36b102b600033604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600380548091906001016100fb9190610164565b5033600360016003805490500381548110151561011457fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6101b5565b81548183558181151161018b5781836000526020600020918201910161018a9190610190565b5b505050565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b61112b806101c46000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313bfabf0146100ba5780631785f53c146101085780633a470b9e1461013e57806357e60c271461017457806370480275146101aa57806372239313146101e0578063b303cec014610216578063bbb896ad1461024c578063c0395bb51461029a578063c2ccb8a8146102e8578063cd5a9bf314610336578063d6f5792d14610384575bfe5b34156100c257fe5b6100ee600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103d2565b604051808215151515815260200191505060405180910390f35b341561011057fe5b61013c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610479565b005b341561014657fe5b610172600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610614565b005b341561017c57fe5b6101a8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610775565b005b34156101b257fe5b6101de600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108d6565b005b34156101e857fe5b610214600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aad565b005b341561021e57fe5b61024a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c84565b005b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e5b565b604051808215151515815260200191505060405180910390f35b34156102a257fe5b6102ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eb2565b604051808215151515815260200191505060405180910390f35b34156102f057fe5b61031c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f59565b604051808215151515815260200191505060405180910390f35b341561033e57fe5b61036a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fb0565b604051808215151515815260200191505060405180910390f35b341561038c57fe5b6103b8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611057565b604051808215151515815260200191505060405180910390f35b60006000600090505b60048054905081101561046e578273ffffffffffffffffffffffffffffffffffffffff1660048281548110151561040e57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104605760019150610473565b5b80806001019150506103db565b600091505b50919050565b61048233610e5b565b151561048e5760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104c85760006000fd5b600060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156105215760006000fd5b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdb9d5d31320daf5bc7181d565b6da4d12e30f0f4d5aa324a992426c14a1d19ce3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b61061d33610e5b565b15156106295760006000fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156106825760006000fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f750c77cba4874c6e56e316fa14e5fca7fbbc3298ed7514cc93289fd2ebb4b9b13382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b61077e33610e5b565b151561078a5760006000fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156107e35760006000fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff7637bec7af7759a6ecc6c2d6fc2cd367df8da51fb3b32d5a8ffc62b43d434533382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b6108df33610e5b565b15156108eb5760006000fd5b600060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109435760006000fd5b6001600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbf3f493c772c8c283fd124432c2d0f539ab343faa04258fe88e52912d36b102b3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160038054809190600101610a4691906110ae565b50806003600160038054905003815481101515610a5f57fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b610ab633610e5b565b1515610ac25760006000fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b1a5760006000fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f4bcf74b2aab0566533b58853ea6976777a70db23a1e1cb88c86e837693da2ee83382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160058054809190600101610c1d91906110ae565b50806005600160058054905003815481101515610c3657fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b610c8d33610e5b565b1515610c995760006000fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610cf15760006000fd5b6001600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fba809390cd7e3131be201e3a07f7949a0c29cf91204bd4f31f403411f9479e0d3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160048054809190600101610df491906110ae565b50806004600160048054905003815481101515610e0d57fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b60006000600090505b600380549050811015610f4e578273ffffffffffffffffffffffffffffffffffffffff16600382815481101515610eee57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f405760019150610f53565b5b8080600101915050610ebb565b600091505b50919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b60006000600090505b60058054905081101561104c578273ffffffffffffffffffffffffffffffffffffffff16600582815481101515610fec57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561103e5760019150611051565b5b8080600101915050610fb9565b600091505b50919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b8154818355818115116110d5578183600052602060002091820191016110d491906110da565b5b505050565b6110fc91905b808211156110f85760008160009055506001016110e0565b5090565b905600a165627a7a72305820af19d09c92f3b154990a462b1ddacaf2f2fc1e01f4edcad95ffa3756a88a25140029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:1"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 1676047325, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b611d558061001c6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d63fdbe146100a45780634d7dcfbd1461013a5780638c115322146101b057806397a420221461022c578063cba66e14146103a6578063d5c469f814610433578063d5c9712f146104af578063e0303a2e14610527578063e0a802ba146105de578063e57ea16d146106ac575bfe5b610106600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610737565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b610193600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190505061078f565b604051808381526020018281526020019250505060405180910390f35b610212600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919050506108b1565b604051808215151515815260200191505060405180910390f35b61028e600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610c15565b604051808060200180602001806020018581526020018481038452888181518152602001915080519060200190602002808383600083146102ee575b8051825260208311156102ee576020820191506020810190506020830392506102ca565b50505090500184810383528781815181526020019150805190602001906020028083836000831461033e575b80518252602083111561033e5760208201915060208101905060208303925061031a565b50505090500184810382528681815181526020019150805190602001906020028083836000831461038e575b80518252602083111561038e5760208201915060208101905060208303925061036a565b50505090500197505050505050505060405180910390f35b6103ff600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610da9565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b610495600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610ed0565b604051808215151515815260200191505060405180910390f35b610511600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919050506110e1565b6040518082815260200191505060405180910390f35b610577600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506118f9565b60405180858152602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001838152602001826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200194505050505060405180910390f35b610640600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050611b22565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360008314610698575b80518252602083111561069857602082019150602081019050602083039250610674565b505050905001935050505060405180910390f35b61071d600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356bffffffffffffffffffffffff1916906020019091908035906020019091905050611c01565b604051808215151515815260200191505060405180910390f35b60006107448484846108b1565b1561075d576107568460038501610da9565b9050610788565b610768848484610ed0565b156107815761077a8460028501610da9565b9050610788565b610788565b5b5b9392505050565b60006000600084848151811015156107a357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff1610156108365780848160ff169150925092506108a9565b60fd8160ff16141561085b5761084e858560106110e1565b60028501925092506108a9565b60fe8160ff16141561088057610873858560206110e1565b60048501925092506108a9565b60ff8160ff1614156108a557610898858560406110e1565b60088501925092506108a9565b5b5b5b5b509250929050565b600060198214801561095f575060767f01000000000000000000000000000000000000000000000000000000000000000284848151811015156108f057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610a0a575060a97f010000000000000000000000000000000000000000000000000000000000000002846001850181518110151561099b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610ab5575060147f0100000000000000000000000000000000000000000000000000000000000000028460028501815181101515610a4657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610b60575060887f0100000000000000000000000000000000000000000000000000000000000000028460178501815181101515610af157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610c0b575060ac7f0100000000000000000000000000000000000000000000000000000000000000028460188501815181101515610b9c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90505b9392505050565b610c1d611d01565b610c25611d01565b610c2d611d01565b6000600060006000610c3d611d01565b610c45611d01565b610c4d611d01565b6000610c598e8e61078f565b809e50819850505060008c1480610c6f5750868c115b15610c7c57869550610c80565b8b95505b85604051805910610c8e5750595b908082528060200260200182016040525b50935085604051805910610cb05750595b908082528060200260200182016040525b50925085604051805910610cd25750595b908082528060200260200182016040525b509150600090505b858160ff161015610d8c57610d028e8e60406110e1565b828260ff16815181101515610d1357fe5b906020019060200201818152505060088d019c50610d318e8e61078f565b809e5081965050508c848260ff16815181101515610d4b57fe5b906020019060200201818152505084838260ff16815181101515610d6b57fe5b9060200190602002018181525050848d019c505b8080600101915050610ceb565b8184848f9a509a509a509a505b5050505050505093509350935093565b60006000600060009150600090505b60148173ffffffffffffffffffffffffffffffffffffffff161015610eb5578060130360080273ffffffffffffffffffffffffffffffffffffffff1685858373ffffffffffffffffffffffffffffffffffffffff1601815181101515610e1a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff169060020a02820191505b8080600101915050610db8565b816c010000000000000000000000000292505b505092915050565b6000601782148015610f81575060a97f0100000000000000000000000000000000000000000000000000000000000000028460008501815181101515610f1257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561102c575060147f0100000000000000000000000000000000000000000000000000000000000000028460018501815181101515610fbd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156110d7575060877f010000000000000000000000000000000000000000000000000000000000000002846016850181518110151561106857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90505b9392505050565b600060088214156111725783838151811015156110fa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1690506118f2565b601082141561128657610100846001850181518110151561118f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402848481518110151561120c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff1690506118f2565b60208214156114a757630100000084600385018151811015156112a557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040262010000856002860181518110151561132957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040261010086600187018151811015156113ac57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402868681518110151561142957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff1690506118f2565b60408214156118ee5767010000000000000084600785018151811015156114ca57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026601000000000000856006860181518110151561155257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026501000000000086600587018151811015156115d957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402640100000000876004880181518110151561165f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402630100000088600389018151811015156116e457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a0181518110151561176857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b018151811015156117eb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a81518110151561186857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff1690506118f2565b5b5b5b5b9392505050565b6000600060006000600061190b611d01565b611913611d01565b61191b611d01565b611923611d01565b61192b611d15565b60006000600260405180591061193e5750595b908082528060200260200182016040525b50965060026040518059106119615750595b908082528060200260200182016040525b50955060026040518059106119845750595b908082528060200260200182016040525b50945060026040518059106119a75750595b908082528060200260200182016040525b50935060026040518059106119ca5750595b908082528060200260200182016040525b509250600497506119ee8d896000611b22565b8099508198505050611a028d896002610c15565b809b5081995082985083975050505050600091505b6002821015611aa657611a598d8684815181101515611a3257fe5b906020019060200201518885815181101515611a4a57fe5b90602001906020020151610737565b9050808383815181101515611a6a57fe5b906020019060200201906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff1916815250505b8180600101925050611a17565b836000815181101515611ab557fe5b90602001906020020151836000815181101515611ace57fe5b90602001906020020151856001815181101515611ae757fe5b90602001906020020151856001815181101515611b0057fe5b906020019060200201519b509b509b509b505b50505050505050509193509193565b611b2a611d01565b6000600060006000611b3a611d01565b6000611b468a8a61078f565b809a5081965050506000881480611b5c57508488115b15611b6957849350611b6d565b8793505b83604051805910611b7b5750595b908082528060200260200182016040525b509150600090505b838160ff161015611bed57602489019850611baf8a8a61078f565b809a50819450505082828260ff16815181101515611bc957fe5b906020019060200201818152505060048301890198505b8080600101915050611b94565b8189965096505b5050505050935093915050565b60006000611c0d611d01565b611c15611d01565b611c1d611d01565b6000600060049550611c318a876000611b22565b905080965050611c438a876000610c15565b50945094509450600091505b8451821015611cf357611c918a8584815181101515611c6a57fe5b906020019060200201518585815181101515611c8257fe5b90602001906020020151610737565b9050886bffffffffffffffffffffffff1916816bffffffffffffffffffffffff1916148015611cd75750878583815181101515611cca57fe5b9060200190602002015110155b15611ce55760019650611cf4565b5b8180600101925050611c4f565b5b5050505050509392505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820216b14c0c6618660e70978063d30d1e543a27d4d9c4fd6ab04db58733cf576a70029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:3"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 4647539854, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040526007600355341561001157fe5b6040516040806115fe833981016040528080519060200190919080519060200190919050505b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505b611532806100cc6000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063093d11a1146100e65780631208a2561461013957806327a1a4141461019a57806328e96cb0146101ce57806351e0e26b146101ee5780635b04e512146102385780636784b07514610277578063719f3089146102ad5780638c5871bf146102f75780639d406a131461034a578063a54baeda1461039d578063aefa68f0146103bd578063bcd2780b146103f5578063c8d689b11461042b578063d3eee5ad1461044b578063ff9f633f14610474575bfe5b34156100ee57fe5b610123600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104d5565b6040518082815260200191505060405180910390f35b341561014157fe5b610176600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610593565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156101a257fe5b6101b8600480803590602001909190505061071e565b6040518082815260200191505060405180910390f35b34156101d657fe5b6101ec6004808035906020019091905050610736565b005b34156101f657fe5b610222600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610828565b6040518082815260200191505060405180910390f35b341561024057fe5b610275600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610840565b005b341561027f57fe5b6102ab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108a3565b005b34156102b557fe5b6102e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ac0565b6040518082815260200191505060405180910390f35b34156102ff57fe5b610334600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b5e565b6040518082815260200191505060405180910390f35b341561035257fe5b610387600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c1c565b6040518082815260200191505060405180910390f35b34156103a557fe5b6103bb6004808035906020019091905050610cda565b005b34156103c557fe5b6103db6004808035906020019091905050610e73565b604051808215151515815260200191505060405180910390f35b34156103fd57fe5b610429600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e94565b005b341561043357fe5b61044960048080359060200190919050506110b1565b005b341561045357fe5b610472600480803590602001909190803590602001909190505061124a565b005b341561047c57fe5b6104b1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611359565b60405180848152602001838152602001828152602001935050505060405180910390f35b60006000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515156105275760006000fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561057357fe5b906000526020600020906003020160005b506000015490505b5b92915050565b6000600060006000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515156105e95760006000fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561063557fe5b906000526020600020906003020160005b50600001549250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561069957fe5b906000526020600020906003020160005b50600101549150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156106fd57fe5b906000526020600020906003020160005b506002015490505b5b9250925092565b60066020528060005260406000206000915090505481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156107f857fe5b6102c65a03f1151561080657fe5b50505060405180519050151561081c5760006000fd5b806003819055505b5b50565b60056020528060005260406000206000915090505481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515156108905760006000fd5b61089d82826003546113a0565b5b5b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561096557fe5b6102c65a03f1151561097357fe5b5050506040518051905015156109895760006000fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156109d75760006000fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffc9149499cb272ed99f3f2a697c857da114eb6bde337eb16a6e35b0e9ad2f6c2338242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b5b50565b60006000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610b125760006000fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090505b5b919050565b60006000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610bb05760006000fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515610bfc57fe5b906000526020600020906003020160005b506001015490505b5b92915050565b60006000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610c6e5760006000fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515610cba57fe5b906000526020600020906003020160005b506002015490505b5b92915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610d9c57fe5b6102c65a03f11515610daa57fe5b505050604051805190501515610dc05760006000fd5b600060066000838152602001908152602001600020541415610de25760006000fd5b600060066000838152602001908152602001600020819055507ffa93185fdfd46762c6560878ff0b8087435d4274be46adb6e2842c479db32bf4338242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b50565b6000600060066000848152602001908152602001600020541490505b919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610f5657fe5b6102c65a03f11515610f6457fe5b505050604051805190501515610f7a5760006000fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610fc95760006000fd5b42600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fbc2c3a125cb51f06152199798b29a03239566d6110836a4e3c53c79cc5a30d31338242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561117357fe5b6102c65a03f1151561118157fe5b5050506040518051905015156111975760006000fd5b600060066000838152602001908152602001600020541415156111ba5760006000fd5b4260066000838152602001908152602001600020819055507fbc04056a308c2c46aba46cd10517b78ed051e6d408bafe9eb694ef6e56c416df338242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b50565b61125381610e73565b1515156112605760006000fd5b81600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0821be3336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561132357fe5b6102c65a03f1151561133157fe5b50505060405180519050101515156113495760006000fd5b6113543383836113a0565b5b5050565b60046020528160005260406000208181548110151561137457fe5b906000526020600020906003020160005b91509150508060000154908060010154908060020154905083565b60006113b8620151808361146790919063ffffffff16565b42019050600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480600101828161140d919061149c565b916000526020600020906003020160005b6060604051908101604052808781526020018581526020018681525090919091506000820151816000015560208201518160010155604082015181600201555050505b50505050565b6000600082840290506000841480611489575082848281151561148657fe5b04145b151561149157fe5b8091505b5092915050565b8154818355818115116114c9576003028160030283600052602060002091820191016114c891906114ce565b5b505050565b61150391905b808211156114ff576000600082016000905560018201600090556002820160009055506003016114d4565b5090565b905600a165627a7a7230582089ceb4111d0008d07d2258f38151254adfa8745071ca6f24fe27dcaee12fb4430029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "16:1:5"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 6652586698, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a72305820017f9700b14f71d72c3b70d47d074bc08b1cb933ef0939d58cbcbe95859587f40029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "10:1:7"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 6708832263, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052600060065534156200001257fe5b604051602080620023be833981016040528080519060200190919050505b604060405190810160405280601781526020017f5049452028417574686f7269746f204361706974616c29000000000000000000815250600390805190602001906200007e92919062000133565b50604060405190810160405280600381526020017f504945000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000cd92919062000133565b506012600560006101000a81548160ff021916908360ff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50620001e2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017657805160ff1916838001178555620001a7565b82800160010185558215620001a7579182015b82811115620001a657825182559160200191906001019062000189565b5b509050620001b69190620001ba565b5090565b620001df91905b80821115620001db576000816000905550600101620001c1565b5090565b90565b6121cc80620001f26000396000f300606060405236156100fa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100fc578063095ea7b31461019557806318160ddd146101ec57806323b872dd1461021257806327e235e314610288578063313ce567146102d257806370a08231146102fe578063862a4bf2146103485780638eb04f02146103a857806395d89b41146103de578063a0821be314610477578063a9059cbb146104c1578063bdb2717014610518578063d13e58461461054e578063d19b8d8714610574578063d3ce77fe146105c6578063dd62ed3e1461061d578063f0dda65c14610686575bfe5b341561010457fe5b61010c6106c5565b604051808060200182810382528381815181526020019150805190602001908083836000831461015b575b80518252602083111561015b57602082019150602081019050602083039250610137565b505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019d57fe5b6101d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610763565b604051808215151515815260200191505060405180910390f35b34156101f457fe5b6101fc61086f565b6040518082815260200191505060405180910390f35b341561021a57fe5b61026e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061087a565b604051808215151515815260200191505060405180910390f35b341561029057fe5b6102bc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d32565b6040518082815260200191505060405180910390f35b34156102da57fe5b6102e2610d4a565b604051808260ff1660ff16815260200191505060405180910390f35b341561030657fe5b610332600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d5d565b6040518082815260200191505060405180910390f35b341561035057fe5b6103666004808035906020019091905050610da7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103b057fe5b6103dc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ed4565b005b34156103e657fe5b6103ee611000565b604051808060200182810382528381815181526020019150805190602001908083836000831461043d575b80518252602083111561043d57602082019150602081019050602083039250610419565b505050905090810190601f1680156104695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047f57fe5b6104ab600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061109e565b6040518082815260200191505060405180910390f35b34156104c957fe5b6104fe600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113e4565b604051808215151515815260200191505060405180910390f35b341561052057fe5b61054c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116f7565b005b341561055657fe5b61055e611823565b6040518082815260200191505060405180910390f35b341561057c57fe5b610584611918565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105ce57fe5b610603600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061193e565b604051808215151515815260200191505060405180910390f35b341561062557fe5b610670600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aba565b6040518082815260200191505060405180910390f35b341561068e57fe5b6106c3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b42565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075b5780601f106107305761010080835404028352916020019161075b565b820191906000526020600020905b81548152906001019060200180831161073e57829003601f168201915b505050505081565b6000600260046020820201600036905014151561077c57fe5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5b5092915050565b600060065490505b90565b60006000600360046020820201600036905014151561089557fe5b8361089f8761109e565b10158015610929575083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156109355750600084115b80156109d05750600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109ce85600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7090919063ffffffff16565b115b15610d23576000600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149150610a6c84600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9090919063ffffffff16565b600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3e84600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9090919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c1084600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7090919063ffffffff16565b600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508115610c6357610c6285611eaa565b5b6000600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610cb557610cb486611fc2565b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250610d28565b600092505b5b50509392505050565b60006020528060005260406000206000915090505481565b600560009054906101000a900460ff1681565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6f5792d336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610e6b57fe5b6102c65a03f11515610e7957fe5b505050604051805190501515610e8f5760006000fd5b600282815481101515610e9e57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b5b919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610f9657fe5b6102c65a03f11515610fa457fe5b505050604051805190501515610fba5760006000fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110965780601f1061106b57610100808354040283529160200191611096565b820191906000526020600020905b81548152906001019060200180831161107957829003601f168201915b505050505081565b60006000600060006000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663719f3089876000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561116a57fe5b6102c65a03f1151561117857fe5b50505060405180519050935060009250600091505b838210156113865742600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c5871bf88856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561126057fe5b6102c65a03f1151561126e57fe5b50505060405180519050111561137857600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663093d11a187846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561134857fe5b6102c65a03f1151561135657fe5b5050506040518051905090506113758184611e7090919063ffffffff16565b92505b5b818060010192505061118d565b6113d883600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9090919063ffffffff16565b94505b50505050919050565b6000600060026004602082020160003690501415156113ff57fe5b836114093361109e565b10806114a45750600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114a285600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7090919063ffffffff16565b105b156114b257600092506116ee565b6000600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414915061154984600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9090919063ffffffff16565b600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115de84600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7090919063ffffffff16565b600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081156116315761163085611eaa565b5b6000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156116845761168333611fc2565b5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b5b505092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156117b957fe5b6102c65a03f115156117c757fe5b5050506040518051905015156117dd5760006000fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6f5792d336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156118e757fe5b6102c65a03f115156118f557fe5b50505060405180519050151561190b5760006000fd5b60028054905090505b5b90565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060006000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806119d75750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156119e25760006000fd5b6119eb8461109e565b9050828110156119fe5760009150611ab3565b82600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550826006600082825403925050819055506000600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611aae57611aad84611fc2565b5b600191505b5092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60006002600460208202016000369050141515611b5b57fe5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2ccb8a8336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611c1d57fe5b6102c65a03f11515611c2b57fe5b505050604051805190501515611c415760006000fd5b6000600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149150611c9b83600654611e7090919063ffffffff16565b600681905550611cf383600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7090919063ffffffff16565b600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b04e51285856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515611df757fe5b6102c65a03f11515611e0557fe5b5050508115611e1857611e1784611eaa565b5b8373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b50505050565b600060008284019050838110151515611e8557fe5b8091505b5092915050565b6000828211151515611e9e57fe5b81830390505b92915050565b600060006002805490509150600090505b81811015611f45578273ffffffffffffffffffffffffffffffffffffffff16600282815481101515611ee957fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f3757611fbd565b5b8080600101915050611ebb565b60028054809190600101611f59919061214f565b50826002600160028054905003815481101515611f7257fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b600060006000600060028054905093506000925060009150600090505b83811015612070578473ffffffffffffffffffffffffffffffffffffffff1660028281548110151561200d57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120625780925060019150612070565b5b8080600101915050611fdf565b81151561207c57612148565b8290505b600184038110156121315760026001820181548110151561209d57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002828154811015156120d957fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8080600101915050612080565b6002805480919060019003612146919061214f565b505b5050505050565b81548183558181151161217657818360005260206000209182019101612175919061217b565b5b505050565b61219d91905b80821115612199576000816000905550600101612181565b5090565b905600a165627a7a72305820932b854e560b743b899969fbd09c8a39227e34a43a5ce4d6f0adc1367124ee6f0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "17:1:9"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 10606898069, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040526000600060006101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055506102bc6001556136b060025560006006556000600755341561005857fe5b60405160208061151a833981016040528080519060200190919050505b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b611452806100c86000396000f300606060405236156100ef576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063038e666f146101015780630502631714610127578063166280141461014d578063167ff46f1461016d57806320940b131461017f5780633050f769146101b7578063360821e8146101ef57806343d726d61461020f578063666fc4d414610221578063a970ef6e14610247578063b107baa114610271578063b1efbd6f14610297578063b23d4854146102b7578063ce649b39146102ed578063e4f2487a1461030d578063ec8ac4d814610337578063ee3a022914610365575b6100ff5b6100fc33610413565b5b565b005b341561010957fe5b610111610583565b6040518082815260200191505060405180910390f35b341561012f57fe5b610137610589565b6040518082815260200191505060405180910390f35b341561015557fe5b61016b600480803590602001909190505061058f565b005b341561017557fe5b61017d6106c2565b005b341561018757fe5b61019d60048080359060200190919050506107f6565b604051808215151515815260200191505060405180910390f35b34156101bf57fe5b6101d56004808035906020019091905050610821565b604051808215151515815260200191505060405180910390f35b34156101f757fe5b61020d6004808035906020019091905050610841565b005b341561021757fe5b61021f610972565b005b341561022957fe5b610231610b36565b6040518082815260200191505060405180910390f35b341561024f57fe5b610257610b3c565b604051808215151515815260200191505060405180910390f35b341561027957fe5b610281610b4f565b6040518082815260200191505060405180910390f35b341561029f57fe5b6102b56004808035906020019091905050610b55565b005b34156102bf57fe5b6102eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c86565b005b34156102f557fe5b61030b6004808035906020019091905050610de8565b005b341561031557fe5b61031d610f1b565b604051808215151515815260200191505060405180910390f35b610363600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610413565b005b341561036d57fe5b6103fd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080356bffffffffffffffffffffffff1916906020019091905050610f2e565b6040518082815260200191505060405180910390f35b60006000600060009054906101000a900460ff1615806104405750600060019054906101000a900460ff16155b1561044b5760006000fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156104725760006000fd5b61047a6113d0565b15156104865760006000fd5b34915061049e600154836113f190919063ffffffff16565b9050600081111561057c57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0dda65c84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561056a57fe5b6102c65a03f1151561057857fe5b5050505b5b5b505050565b60015481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561065157fe5b6102c65a03f1151561065f57fe5b5050506040518051905015156106755760006000fd5b806002819055507f5f2bf49af30808bbff24b0af5819f56ba193d8fc47b367615775ee2dd5f97dec60025442604051808381526020018281526020019250505060405180910390a15b5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561078457fe5b6102c65a03f1151561079257fe5b5050506040518051905015156107a85760006000fd5b6001600060016101000a81548160ff0219169083151502179055507f912ee23dde46ec889d6748212cce445d667f7041597691dc89e8549ad8bc0acb60405180905060405180910390a15b5b565b60006005600083815260200190815260200160002060009054906101000a900460ff1690505b919050565b60056020528060005260406000206000915054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561090357fe5b6102c65a03f1151561091157fe5b5050506040518051905015156109275760006000fd5b806007819055507f0f581aed4ee55ef244fb65c7f6dc5bc8dba3949c6677963e9f59c228d1486b128142604051808381526020018281526020019250505060405180910390a15b5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a3457fe5b6102c65a03f11515610a4257fe5b505050604051805190501515610a585760006000fd5b600060009054906101000a900460ff161580610a815750600060019054906101000a900460ff16155b15610a8c5760006000fd5b6000600060016101000a81548160ff0219169083151502179055507f4c013bd73202fde3c7cfe26ca486d0882f2c5b2fc9c761b15212f759bd2347dd60405180905060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f193505050501515610b315760006000fd5b5b5b5b565b60065481565b600060009054906101000a900460ff1681565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610c1757fe5b6102c65a03f11515610c2557fe5b505050604051805190501515610c3b5760006000fd5b806006819055507fc1ffc0a535dad619268801c820e9d9dcb693707a76982d938cf157d2166045298142604051808381526020018281526020019250505060405180910390a15b5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610d4857fe5b6102c65a03f11515610d5657fe5b505050604051805190501515610d6c5760006000fd5b600060009054906101000a900460ff1615610d875760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060006101000a81548160ff0219169083151502179055505b5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610eaa57fe5b6102c65a03f11515610eb857fe5b505050604051805190501515610ece5760006000fd5b806001819055507f911ff22b86be19d04e0e69cc90dd5eb2534d2782c97535811f664c6f82e9275360015442604051808381526020018281526020019250505060405180910390a15b5b50565b600060019054906101000a900460ff1681565b600060006000600060006000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bbb896ad336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610ffc57fe5b6102c65a03f1151561100a57fe5b5050506040518051905015156110205760006000fd5b60001515600560008b815260200190815260200160002060009054906101000a900460ff1615151415156110545760006000fd5b73aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa63e0303a2e8b6000604051608001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252838181518152602001915080519060200190808383600083146110f2575b8051825260208311156110f2576020820191506020810190506020830392506110ce565b505050905090810190601f16801561111e5780820380516001836020036101000a031916815260200191505b509250505060806040518083038186803b151561113757fe5b6102c65a03f4151561114557fe5b50505060405180519060200180519060200180519060200180519050945094509450945073aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa63e57ea16d8b8960016000604051602001526040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001838152602001828103825285818151815260200191508051906020019080838360008314611234575b80518252602083111561123457602082019150602081019050602083039250611210565b505050905090810190601f1680156112605780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b151561127b57fe5b6102c65a03f4151561128957fe5b50505060405180519050156113bb5760075485101515156112aa5760006000fd5b6402540be4006002548602029050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0dda65c89836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561137957fe5b6102c65a03f1151561138757fe5b5050506001600560008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506113c1565b60006000fd5b5b5b5050505050949350505050565b60006000600034141580156113e757506006543410155b90508091505b5090565b6000600082840290506000841480611413575082848281151561141057fe5b04145b151561141b57fe5b8091505b50929150505600a165627a7a72305820da0f38a3aca667226f2db0089d5bb67b18c5a2d9027148b18ad069780468a0210029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "87:1:11"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}], "meta": {"logs": [{"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}], "mythril_execution_info": {"analysis_duration": 12488351583}}, "sourceFormat": "text", "sourceList": ["Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol", "Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol", "Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol", "Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol", "Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol", "Benchmarks/Study_SamplesSet/207a94d45ef3759b3c256f2eca789e8a.sol"], "sourceType": "solidity-file"}]
