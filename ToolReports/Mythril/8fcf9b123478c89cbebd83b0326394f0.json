[{"issues": [{"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 48442840, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x606060405234156200000d57fe5b5b5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200009360007f010000000000000000000000000000000000000000000000000000000000000002620000c364010000000002620015c1176401000000009004565b66019945ca2620006003819055506001600460006101000a81548160ff0219169083151502179055505b6200044f565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200012757620001256000620002f864010000000002620013cd176401000000009004565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620001b657fe5b6102c65a03f11515620001c557fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688dcfd7826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b1515620002e157fe5b6102c65a03f11515620002f057fe5b5050505b5b50565b6000819150600062000332731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6200043d64010000000002620014e2176401000000009004565b11156200039857731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062000438565b6000620003cd73c03a2615d5efaf5f49f60b7bb6583eaec212fdf16200043d64010000000002620014e2176401000000009004565b1115620004335773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062000438565b600090505b919050565b6000819150809050813b90505b919050565b611807806200045f6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631d4494f1146100a4578063238dafe0146100fe57806330ac305214610128578063367edd32146101bd5780633ccfd60b146101cf578063439766ce146101e157806344097d70146101f35780635cb85cd2146102195780638da5cb5b14610239578063f2fde38b1461028b575bfe5b34156100ac57fe5b6100fc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506102c1565b005b341561010657fe5b61010e61033a565b604051808215151515815260200191505060405180910390f35b6101bb600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061034d565b005b34156101c557fe5b6101cd61048b565b005b34156101d757fe5b6101df61056f565b005b34156101e957fe5b6101f161064d565b005b34156101fb57fe5b610203610731565b6040518082815260200191505060405180910390f35b341561022157fe5b610237600480803590602001909190505061073c565b005b341561024157fe5b6102496107de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029357fe5b6102bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610804565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561031e5760006000fd5b80600590805190602001906103349291906114f4565b505b5b50565b600460009054906101000a900460ff1681565b600460009054906101000a900460ff1615156103695760006000fd5b6003543410156103795760006000fd5b3073ffffffffffffffffffffffffffffffffffffffff1631600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f38896000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260038152602001807f55524c0000000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b151561045857fe5b6102c65a03f1151561046657fe5b50505060405180519050111561047c5760006000fd5b61048682826108a7565b5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104e85760006000fd5b6001600460006101000a81548160ff0219169083151502179055507f881fcefc69933fe898a788beea704e1ba2661bdc04014227daa1686474058b146040518080602001828103825260188152602001807f54657874696e6720686173206265656e20656e61626c6564000000000000000081525060200191505060405180910390a15b5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cc5760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003543073ffffffffffffffffffffffffffffffffffffffff1631039081150290604051809050600060405180830381858888f19350505050151561064957fe5b5b5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106aa5760006000fd5b6000600460006101000a81548160ff0219169083151502179055507f881fcefc69933fe898a788beea704e1ba2661bdc04014227daa1686474058b146040518080602001828103825260198152602001807f54657874696e6720686173206265656e2064697361626c65640000000000000081525060200191505060405180910390a15b5b565b600060035490505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107995760006000fd5b806003819055507f23c5a088965254a071a70a204e37af93d53ba54871883ece71328fa390dffe806003546040518082815260200191505060405180910390a15b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108615760006000fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b610956604060405190810160405280600781526020017f7b22746f223a220000000000000000000000000000000000000000000000000081525083604060405190810160405280600981526020017f222c226d7367223a22000000000000000000000000000000000000000000000081525084604060405190810160405280600281526020017f227d000000000000000000000000000000000000000000000000000000000000815250610ae7565b6006908051906020019061096b9291906114f4565b50610ae1604060405190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b505050505060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050610f23565b505b5050565b610aef611574565b610af7611588565b610aff611588565b610b07611588565b610b0f611588565b610b17611588565b610b1f611574565b610b27611588565b600060008e98508d97508c96508b95508a94508451865188518a518c5101010101604051805910610b555750595b908082528060200260200182016040525b50935083925060009150600090505b8851811015610c29578881815181101515610b8c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610beb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610b75565b600090505b8751811015610ce2578781815181101515610c4557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610ca457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610c2e565b600090505b8651811015610d9b578681815181101515610cfe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610d5d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610ce7565b600090505b8551811015610e54578581815181101515610db757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610e1657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610da0565b600090505b8451811015610f0d578481815181101515610e7057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610ecf57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610e59565b8299505b50505050505050505095945050505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f7457610f7260006113cd565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561100257fe5b6102c65a03f1151561101057fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889866000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200182810382528381815181526020019150805190602001908083836000831461111c575b80518252602083111561111c576020820191506020810190506020830392506110f8565b505050905090810190601f1680156111485780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561116357fe5b6102c65a03f1151561117157fe5b50505060405180519050905062030d403a02670de0b6b3a7640000018111156111a057600060010291506113c4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663772286598260008888886000604051602001526040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360008314611275575b80518252602083111561127557602082019150602081019050602083039250611251565b505050905090810190601f1680156112a15780820380516001836020036101000a031916815260200191505b508481038352868181518152602001915080519060200190808383600083146112e9575b8051825260208311156112e9576020820191506020810190506020830392506112c5565b505050905090810190601f1680156113155780820380516001836020036101000a031916815260200191505b5084810382528581815181526020019150805190602001908083836000831461135d575b80518252602083111561135d57602082019150602081019050602083039250611339565b505050905090810190601f1680156113895780820380516001836020036101000a031916815260200191505b509750505050505050506020604051808303818588803b15156113a857fe5b6125ee5a03f115156113b657fe5b505050506040518051905091505b5b509392505050565b600081915060006113f1731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6114e2565b111561145557731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114dd565b600061147473c03a2615d5efaf5f49f60b7bb6583eaec212fdf16114e2565b11156114d85773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114dd565b600090505b919050565b6000819150809050813b90505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061153557805160ff1916838001178555611563565b82800160010185558215611563579182015b82811115611562578251825591602001919060010190611547565b5b509050611570919061159c565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6115be91905b808211156115ba5760008160009055506001016115a2565b5090565b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561160e5761160c60006113cd565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561169c57fe5b6102c65a03f115156116aa57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688dcfd7826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b15156117c557fe5b6102c65a03f115156117d357fe5b5050505b5b505600a165627a7a723058204e5535c791ddd55ec405e5b32d0f8cba4131bc216fe39610b52f9170504f33220029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "12:1:1"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 192445278, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x1", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x606060405234156200000d57fe5b5b5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200009360007f010000000000000000000000000000000000000000000000000000000000000002620000c364010000000002620015c1176401000000009004565b66019945ca2620006003819055506001600460006101000a81548160ff0219169083151502179055505b6200044f565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200012757620001256000620002f864010000000002620013cd176401000000009004565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515620001b657fe5b6102c65a03f11515620001c557fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688dcfd7826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b1515620002e157fe5b6102c65a03f11515620002f057fe5b5050505b5b50565b6000819150600062000332731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6200043d64010000000002620014e2176401000000009004565b11156200039857731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062000438565b6000620003cd73c03a2615d5efaf5f49f60b7bb6583eaec212fdf16200043d64010000000002620014e2176401000000009004565b1115620004335773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062000438565b600090505b919050565b6000819150809050813b90505b919050565b611807806200045f6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631d4494f1146100a4578063238dafe0146100fe57806330ac305214610128578063367edd32146101bd5780633ccfd60b146101cf578063439766ce146101e157806344097d70146101f35780635cb85cd2146102195780638da5cb5b14610239578063f2fde38b1461028b575bfe5b34156100ac57fe5b6100fc600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506102c1565b005b341561010657fe5b61010e61033a565b604051808215151515815260200191505060405180910390f35b6101bb600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061034d565b005b34156101c557fe5b6101cd61048b565b005b34156101d757fe5b6101df61056f565b005b34156101e957fe5b6101f161064d565b005b34156101fb57fe5b610203610731565b6040518082815260200191505060405180910390f35b341561022157fe5b610237600480803590602001909190505061073c565b005b341561024157fe5b6102496107de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029357fe5b6102bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610804565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561031e5760006000fd5b80600590805190602001906103349291906114f4565b505b5b50565b600460009054906101000a900460ff1681565b600460009054906101000a900460ff1615156103695760006000fd5b6003543410156103795760006000fd5b3073ffffffffffffffffffffffffffffffffffffffff1631600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f38896000604051602001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260038152602001807f55524c0000000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b151561045857fe5b6102c65a03f1151561046657fe5b50505060405180519050111561047c5760006000fd5b61048682826108a7565b5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104e85760006000fd5b6001600460006101000a81548160ff0219169083151502179055507f881fcefc69933fe898a788beea704e1ba2661bdc04014227daa1686474058b146040518080602001828103825260188152602001807f54657874696e6720686173206265656e20656e61626c6564000000000000000081525060200191505060405180910390a15b5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cc5760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003543073ffffffffffffffffffffffffffffffffffffffff1631039081150290604051809050600060405180830381858888f19350505050151561064957fe5b5b5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106aa5760006000fd5b6000600460006101000a81548160ff0219169083151502179055507f881fcefc69933fe898a788beea704e1ba2661bdc04014227daa1686474058b146040518080602001828103825260198152602001807f54657874696e6720686173206265656e2064697361626c65640000000000000081525060200191505060405180910390a15b5b565b600060035490505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107995760006000fd5b806003819055507f23c5a088965254a071a70a204e37af93d53ba54871883ece71328fa390dffe806003546040518082815260200191505060405180910390a15b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108615760006000fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b610956604060405190810160405280600781526020017f7b22746f223a220000000000000000000000000000000000000000000000000081525083604060405190810160405280600981526020017f222c226d7367223a22000000000000000000000000000000000000000000000081525084604060405190810160405280600281526020017f227d000000000000000000000000000000000000000000000000000000000000815250610ae7565b6006908051906020019061096b9291906114f4565b50610ae1604060405190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b505050505060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050610f23565b505b5050565b610aef611574565b610af7611588565b610aff611588565b610b07611588565b610b0f611588565b610b17611588565b610b1f611574565b610b27611588565b600060008e98508d97508c96508b95508a94508451865188518a518c5101010101604051805910610b555750595b908082528060200260200182016040525b50935083925060009150600090505b8851811015610c29578881815181101515610b8c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610beb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610b75565b600090505b8751811015610ce2578781815181101515610c4557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610ca457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610c2e565b600090505b8651811015610d9b578681815181101515610cfe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610d5d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610ce7565b600090505b8551811015610e54578581815181101515610db757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610e1657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610da0565b600090505b8451811015610f0d578481815181101515610e7057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610ecf57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610e59565b8299505b50505050505050505095945050505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f7457610f7260006113cd565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561100257fe5b6102c65a03f1151561101057fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889866000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200182810382528381815181526020019150805190602001908083836000831461111c575b80518252602083111561111c576020820191506020810190506020830392506110f8565b505050905090810190601f1680156111485780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561116357fe5b6102c65a03f1151561117157fe5b50505060405180519050905062030d403a02670de0b6b3a7640000018111156111a057600060010291506113c4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663772286598260008888886000604051602001526040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360008314611275575b80518252602083111561127557602082019150602081019050602083039250611251565b505050905090810190601f1680156112a15780820380516001836020036101000a031916815260200191505b508481038352868181518152602001915080519060200190808383600083146112e9575b8051825260208311156112e9576020820191506020810190506020830392506112c5565b505050905090810190601f1680156113155780820380516001836020036101000a031916815260200191505b5084810382528581815181526020019150805190602001908083836000831461135d575b80518252602083111561135d57602082019150602081019050602083039250611339565b505050905090810190601f1680156113895780820380516001836020036101000a031916815260200191505b509750505050505050506020604051808303818588803b15156113a857fe5b6125ee5a03f115156113b657fe5b505050506040518051905091505b5b509392505050565b600081915060006113f1731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6114e2565b111561145557731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114dd565b600061147473c03a2615d5efaf5f49f60b7bb6583eaec212fdf16114e2565b11156114d85773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114dd565b600090505b919050565b6000819150809050813b90505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061153557805160ff1916838001178555611563565b82800160010185558215611563579182015b82811115611562578251825591602001919060010190611547565b5b509050611570919061159c565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6115be91905b808211156115ba5760008160009055506001016115a2565b5090565b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561160e5761160c60006113cd565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b151561169c57fe5b6102c65a03f115156116aa57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688dcfd7826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b15156117c557fe5b6102c65a03f115156117d357fe5b5050505b5b505600a165627a7a723058204e5535c791ddd55ec405e5b32d0f8cba4131bc216fe39610b52f9170504f33220029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}]}]}, "locations": [{"sourceMap": "437:1:1"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 222079753, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6101c38061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610046578063f2fde38b14610098575bfe5b341561004e57fe5b6100566100ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100a057fe5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100f4565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101515760006000fd5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505600a165627a7a7230582015e5c76dff4172bec069847674a02f070dd66dc2a1474499dcd8480b8d8a39700029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:3"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 373246908, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a72305820d001ba81cb7e5bc36a354680027ab210441a7790785c8ecd26b7f9ac4024feb90029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "10:1:5"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}], "meta": {"logs": [{"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}], "mythril_execution_info": {"analysis_duration": 420454025}}, "sourceFormat": "text", "sourceList": ["Benchmarks/Study_SamplesSet/8fcf9b123478c89cbebd83b0326394f0.sol", "Benchmarks/Study_SamplesSet/8fcf9b123478c89cbebd83b0326394f0.sol", "Benchmarks/Study_SamplesSet/8fcf9b123478c89cbebd83b0326394f0.sol"], "sourceType": "solidity-file"}]
