[{"issues": [{"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 45963048, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b6105698061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ddef58d1461006757806318160ddd146100b557806370a08231146100db5780638b8519a214610125578063a9059cbb1461016f575bfe5b341561006f57fe5b61009b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506101c6565b604051808215151515815260200191505060405180910390f35b34156100bd57fe5b6100c561022c565b6040518082815260200191505060405180910390f35b34156100e357fe5b61010f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610232565b6040518082815260200191505060405180910390f35b341561012d57fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061027c565b6040518082815260200191505060405180910390f35b341561017757fe5b6101ac600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506102c6565b604051808215151515815260200191505060405180910390f35b6000635b4002804211156101dd5760019050610227565b42600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054109050610227565b5b919050565b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156103055760006000fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156103545760006000fd5b61035d336101c6565b15156103695760006000fd5b6103bb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461050390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061045082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600082821115151561051157fe5b81830390505b92915050565b60006000828401905083811015151561053257fe5b8091505b50929150505600a165627a7a72305820f5b07a6a1ef8b10e3881722e17688c7ca6a4a306c96580f205181abd3d19f0870029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:1"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 473028421, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b61027f8061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610046578063f2fde38b14610098575bfe5b341561004e57fe5b6100566100ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100a057fe5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100f4565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101515760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561018e5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405180905060405180910390a380600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505600a165627a7a72305820a3e1aad3081adde8230f16062e31d2473aa1dd6812cceb5918404584b9708d0f0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:3"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 3556221246, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b734daeb4a06f70f4b1a5c329115731fe4b89c0b227600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073373ae730d8c4250b3d022a65ef998b8b7ab1aa53600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073373ae730d8c4250b3d022a65ef998b8b7ab1aa53600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635a5bef00600181905550635a84cd80600281905550635ab83800600381905550611770600681905550610bb860078190555069010f0cf064dd59200000600a81905550690a968163f0a57b400000600b819055505b5b610fa4806101726000396000f30060606040523615610105576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806322b4891d146101175780633092afd51461013d5780633197cbb61461017357806334d2c4cb14610199578063521eb273146101d85780636d6c0ec41461022a5780636fb66278146102695780637c2464f31461028f57806394014dc0146102b557806397912c2f146102db578063983b2d5614610301578063a3e6761014610337578063b1fe1b4a14610389578063c71692b6146103af578063c850029e146103d5578063c8765ff2146103e7578063ec8ac4d81461040d578063ecb70fb71461043b578063fc0c546a14610465575b6101155b610112336104b7565b5b565b005b341561011f57fe5b6101276106ab565b6040518082815260200191505060405180910390f35b341561014557fe5b610171600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106b1565b005b341561017b57fe5b61018361076a565b6040518082815260200191505060405180910390f35b34156101a157fe5b6101d6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610770565b005b34156101e057fe5b6101e86108b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561023257fe5b610267600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108d7565b005b341561027157fe5b610279610b67565b6040518082815260200191505060405180910390f35b341561029757fe5b61029f610b6d565b6040518082815260200191505060405180910390f35b34156102bd57fe5b6102c5610b73565b6040518082815260200191505060405180910390f35b34156102e357fe5b6102eb610b79565b6040518082815260200191505060405180910390f35b341561030957fe5b610335600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b7f565b005b341561033f57fe5b610347610c38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039157fe5b610399610c5e565b6040518082815260200191505060405180910390f35b34156103b757fe5b6103bf610c64565b6040518082815260200191505060405180910390f35b34156103dd57fe5b6103e5610c6a565b005b34156103ef57fe5b6103f7610db6565b6040518082815260200191505060405180910390f35b610439600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104b7565b005b341561044357fe5b61044b610dbc565b604051808215151515815260200191505060405180910390f35b341561046d57fe5b610475610e2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600060008373ffffffffffffffffffffffffffffffffffffffff16141515156104e25760006000fd5b6104ea610e54565b15156104f65760006000fd5b34915060025442101561052a5761051882600854610ed690919063ffffffff16565b6008819055506006548202905061054d565b61053f82600954610ed690919063ffffffff16565b600981905550600754820290505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561061757fe5b6102c65a03f1151561062557fe5b50505060405180519050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36106a5610ef6565b5b505050565b600b5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070e5760006000fd5b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b60035481565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156107c95760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561089357fe5b6102c65a03f115156108a157fe5b50505060405180519050505b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156109325760006000fd5b6001544210158015610945575060035442105b15156109515760006000fd5b6002544210156109b85761097060065483610f5b90919063ffffffff16565b9050600a5461098a82600854610ed690919063ffffffff16565b111515156109985760006000fd5b6109ad81600854610ed690919063ffffffff16565b600881905550610a11565b6109cd60075483610f5b90919063ffffffff16565b9050600b546109e782600954610ed690919063ffffffff16565b111515156109f55760006000fd5b610a0a81600954610ed690919063ffffffff16565b6009819055505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610adb57fe5b6102c65a03f11515610ae957fe5b50505060405180519050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188385604051808381526020018281526020019250505060405180910390a35b505050565b60065481565b60025481565b60085481565b60015481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bdc5760006000fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cc75760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1515610da257fe5b6102c65a03f11515610db057fe5b5050505b565b60075481565b6000600154421015610dd15760009050610e2b565b6001544210158015610de4575060025442105b15610df857600a5460085410159050610e2b565b6002544210158015610e0b575060035442105b15610e1f57600b5460095410159050610e2b565b60019050610e2b565b5b5b5b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001544210158015610e69575060025442105b15610e8f57600a54610e8634600854610ed690919063ffffffff16565b11159050610ed3565b6002544210158015610ea2575060035442105b15610ec857600b54610ebf34600954610ed690919063ffffffff16565b11159050610ed3565b60009050610ed3565b5b5b90565b600060008284019050838110151515610eeb57fe5b8091505b5092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f193505050501515610f5857fe5b5b565b600060008284811515610f6a57fe5b0490508091505b50929150505600a165627a7a723058209107dd419dc9044ef446ee689a2023cbb8101c448e58495695a20be1009183cb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:7"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 4913531303, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a72305820cd08bda95b510aa4b238b2d4af58efc4d99d15d4e1c40e9ae3a5636b874221070029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "10:1:9"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 5010501861, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b61116e8061001c6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100a45780630ddef58d146100fb57806318160ddd1461014957806323b872dd1461016f57806366188463146101e557806370a082311461023c5780638b8519a214610286578063a9059cbb146102d0578063d73dd62314610327578063dd62ed3e1461037e575bfe5b34156100ac57fe5b6100e1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103e7565b604051808215151515815260200191505060405180910390f35b341561010357fe5b61012f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104da565b604051808215151515815260200191505060405180910390f35b341561015157fe5b610159610540565b6040518082815260200191505060405180910390f35b341561017757fe5b6101cb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610546565b604051808215151515815260200191505060405180910390f35b34156101ed57fe5b610222600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061091f565b604051808215151515815260200191505060405180910390f35b341561024457fe5b610270600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bb2565b6040518082815260200191505060405180910390f35b341561028e57fe5b6102ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bfc565b6040518082815260200191505060405180910390f35b34156102d857fe5b61030d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c46565b604051808215151515815260200191505060405180910390f35b341561032f57fe5b610364600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e83565b604051808215151515815260200191505060405180910390f35b341561038657fe5b6103d1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611080565b6040518082815260200191505060405180910390f35b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000635b4002804211156104f1576001905061053b565b42600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410905061053b565b5b919050565b60005481565b6000600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156105855760006000fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156105d45760006000fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106605760006000fd5b610669846104da565b15156106755760006000fd5b6106c782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461110890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061075c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112290919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061082e82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461110890919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60006000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610a31576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ac5565b610a44838261110890919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505b5092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c855760006000fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610cd45760006000fd5b610cdd336104da565b1515610ce95760006000fd5b610d3b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461110890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dd082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112290919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000610f1482600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461112290919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190505b92915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600082821115151561111657fe5b81830390505b92915050565b60006000828401905083811015151561113757fe5b8091505b50929150505600a165627a7a72305820ee6f1b1f27f3165410677a08364321f0f3008f2fbf4f5c705abeb8c9e9817beb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:11"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}], "meta": {"logs": [{"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}], "mythril_execution_info": {"analysis_duration": 6478224993}}, "sourceFormat": "text", "sourceList": ["Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol", "Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol", "Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol", "Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol", "Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol", "Benchmarks/Study_SamplesSet/fba8edc34456e83401445955fb0cc9e8.sol"], "sourceType": "solidity-file"}]
