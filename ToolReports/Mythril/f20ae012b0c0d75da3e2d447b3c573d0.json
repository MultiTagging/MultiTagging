[{"issues": [{"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 44121980, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b6103648061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005157806370a0823114610077578063a9059cbb146100c1575bfe5b341561005957fe5b610061610100565b6040518082815260200191505060405180910390f35b341561007f57fe5b6100ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610106565b6040518082815260200191505060405180910390f35b34156100c957fe5b6100fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610150565b005b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060048101600036905010156101675760006000fd5b5b6101ba82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102fe90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061024f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461031890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b600082821115151561030c57fe5b81830390505b92915050565b60006000828401905083811015151561032d57fe5b8091505b50929150505600a165627a7a72305820227e4c3c0e7699cbe6b7a7e69b2a48d53132ff28fedd244699180098c4dd4dab0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:1"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 334635019, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040526000600060146101000a81548160ff0219169083151502179055506000600360006101000a81548160ff02191690831515021790555060006004556000600555600060065560006007556000600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a55341561009d57fe5b6040516020806113ee833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8060058190555061161f60055401600681905550620135b2600554016007819055505b505b6112bd806101316000396000f30060606040523615610173576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461018457806318160ddd1461021d5780631d0d35f5146102435780632e97766d146102915780632f99c6cc146102b7578063313ce567146103095780633f4ba83a1461032f5780634f8c2a8a1461035957806357e871e71461037f5780635a2791ed146103a55780635c975abb146103cb57806370a08231146103f55780637b2feaaa1461043f5780638456cb59146104655780638d859f3e1461048f5780638da5cb5b146104b557806395d89b4114610507578063a6f2ae3a146105a0578063a9059cbb146105aa578063ae6e22f1146105e9578063ae8734051461060f578063b579184f14610635578063c66e40951461066b578063ce5494bb146106bd578063e02df495146106f3578063e09678fd14610719578063e83036591461074f578063f0d02ce914610775578063f2fde38b1461079b575b6101825b61017f6107d1565b5b565b005b341561018c57fe5b610194610abd565b60405180806020018281038252838181518152602001915080519060200190808383600083146101e3575b8051825260208311156101e3576020820191506020810190506020830392506101bf565b505050905090810190601f16801561020f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022557fe5b61022d610af7565b6040518082815260200191505060405180910390f35b341561024b57fe5b610277600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610afd565b604051808215151515815260200191505060405180910390f35b341561029957fe5b6102a1610b54565b6040518082815260200191505060405180910390f35b34156102bf57fe5b6102c7610b74565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031157fe5b610319610b8c565b6040518082815260200191505060405180910390f35b341561033757fe5b61033f610b91565b604051808215151515815260200191505060405180910390f35b341561036157fe5b610369610c62565b6040518082815260200191505060405180910390f35b341561038757fe5b61038f610c68565b6040518082815260200191505060405180910390f35b34156103ad57fe5b6103b5610c6e565b6040518082815260200191505060405180910390f35b34156103d357fe5b6103db610c74565b604051808215151515815260200191505060405180910390f35b34156103fd57fe5b610429600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c87565b6040518082815260200191505060405180910390f35b341561044757fe5b61044f610cd1565b6040518082815260200191505060405180910390f35b341561046d57fe5b610475610cd7565b604051808215151515815260200191505060405180910390f35b341561049757fe5b61049f610da7565b6040518082815260200191505060405180910390f35b34156104bd57fe5b6104c5610dac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050f57fe5b610517610dd2565b6040518080602001828103825283818151815260200191508051906020019080838360008314610566575b80518252602083111561056657602082019150602081019050602083039250610542565b505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105a86107d1565b005b34156105b257fe5b6105e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e0c565b005b34156105f157fe5b6105f9610e16565b6040518082815260200191505060405180910390f35b341561061757fe5b61061f610e1c565b6040518082815260200191505060405180910390f35b341561063d57fe5b610669600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e22565b005b341561067357fe5b61067b610edd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c557fe5b6106f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f03565b005b34156106fb57fe5b61070361107d565b6040518082815260200191505060405180910390f35b341561072157fe5b61074d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061108a565b005b341561075757fe5b61075f61112e565b6040518082815260200191505060405180910390f35b341561077d57fe5b61078561113b565b6040518082815260200191505060405180910390f35b34156107a357fe5b6107cf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611142565b005b60006000600060001515600360009054906101000a900460ff1615151415610ab1576001600360006101000a81548160ff02191690831515021790555060011515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561086e5760006000fd5b5b600060149054906101000a900460ff161561088a5760006000fd5b5b339250610896610b54565b91506005548210806108aa57508160075411155b156108b55760006000fd5b5b60065482101561092c576000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561090e5760006000fd5b5b68022b1c8c1227a000003411156109265760006000fd5b5b61092d565b5b689032ea62b74b10000061094c3460045461122290919063ffffffff16565b11156109585760006000fd5b5b61096d60083461124290919063ffffffff16565b90506109848160015461122290919063ffffffff16565b6001819055506109dc81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122290919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a343460045461122290919063ffffffff16565b5073651a3731f717a17777c9d8d6f152aa9284978ea373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f193505050501515610a8d5760006000fd5b5b5b5b5b6000600360006101000a81548160ff021916908315150217905550610ab7565b60006000fd5b5b505050565b604060405190810160405280601181526020017f457463682052657761726420546f6b656e00000000000000000000000000000081525081565b60015481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b60006000600a54141515610b6c57600a549050610b71565b5b4390505b90565b73651a3731f717a17777c9d8d6f152aa9284978ea381565b601281565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bf05760006000fd5b5b600060149054906101000a900460ff161515610c0d5760006000fd5b5b6000600060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405180905060405180910390a1600190505b5b5b90565b60075481565b600a5481565b60065481565b600060149054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60055481565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d365760006000fd5b5b600060149054906101000a900460ff1615610d525760006000fd5b5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405180905060405180910390a1600190505b5b5b90565b600881565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604060405190810160405280600581526020017f455443485200000000000000000000000000000000000000000000000000000081525081565b60006000fd5b5050565b60045481565b61161f81565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7f5760006000fd5b5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610f985750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610fa35760006000fd5b5b600060149054906101000a900460ff1615610fbf5760006000fd5b5b600754610fcb610b54565b1015610fd75760006000fd5b5b61102c600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460015461127790919063ffffffff16565b6001819055506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b50565b68022b1c8c1227a0000081565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e75760006000fd5b5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b689032ea62b74b10000081565b620135b281565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119f5760006000fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561121c5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061121d565b5b5b5b50565b60006000828401905083811015151561123757fe5b8091505b5092915050565b6000600082840290506000841480611264575082848281151561126157fe5b04145b151561126c57fe5b8091505b5092915050565b600082821115151561128557fe5b81830390505b929150505600a165627a7a7230582004c1ac478000737f444fee4976f809548932d8d45ca92c183671d9b72b2c21970029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "156:1:3"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 2075876712, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6102008061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610046578063f2fde38b14610098575bfe5b341561004e57fe5b6100566100ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100a057fe5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100f4565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101515760006000fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156101ce5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101cf565b5b5b5b505600a165627a7a72305820187466d8adc07c735f36494752a7a438095afbfe8897cfea628067a231d2e4480029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "11:1:5"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 2576030969, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x200080d", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040526000600060006101000a81548160ff0219169083151502179055503415602657fe5b5b60338060346000396000f30060606040525bfe00a165627a7a72305820020115436da3616faed4f0475c39a64abc3608622270d9e4151ed15f024da6620029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "37:1:9"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}, {"description": {"head": "An assertion violation was triggered.", "tail": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."}, "extra": {"discoveryTime": 2624445676, "testCases": [{"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "blockCoinbase": "0xcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "blockDifficulty": "0xa7d7343662e26", "blockGasLimit": "0x7d0000", "blockNumber": "0x66e393", "blockTime": "0x5bfa4639", "calldata": "", "gasLimit": "0x7d000", "gasPrice": "0x773594000", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a72305820afb93842238c633af339e5d9e59a5650917b59cd864c897c4d9f574245ff31060029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}]}, "locations": [{"sourceMap": "10:1:11"}], "severity": "Medium", "swcID": "SWC-110", "swcTitle": "Assert Violation"}], "meta": {"logs": [{"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}, {"hidden": true, "level": "error", "msg": "Traceback (most recent call last):\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/mythril/mythril_analyzer.py\", line 151, in fire_lasers\n    sym = SymExecWrapper(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/analysis/symbolic.py\", line 182, in __init__\n    self.laser.sym_exec(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 206, in sym_exec\n    self.execute_transactions(created_account.address)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 232, in execute_transactions\n    self._execute_transactions_incremental(\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 277, in _execute_transactions_incremental\n    self.open_states = [\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/svm.py\", line 280, in <listcomp>\n    if state.constraints.is_possible()\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/laser/ethereum/state/constraints.py\", line 34, in is_possible\n    get_model(self, solver_timeout=solver_timeout)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/model.py\", line 101, in get_model\n    ret_model = model_cache.check_quick_sat(simplify(And(*constraints)).raw)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/mythril/support/support_utils.py\", line 63, in check_quick_sat\n    model_copy = deepcopy(model)\n  File \"/usr/lib/python3.10/copy.py\", line 172, in deepcopy\n    y = _reconstruct(x, memo, *rv)\n  File \"/usr/lib/python3.10/copy.py\", line 271, in _reconstruct\n    state = deepcopy(state, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 231, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 146, in deepcopy\n    y = copier(x, memo)\n  File \"/usr/lib/python3.10/copy.py\", line 206, in _deepcopy_list\n    append(deepcopy(a, memo))\n  File \"/usr/lib/python3.10/copy.py\", line 153, in deepcopy\n    y = copier(memo)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6257, in __deepcopy__\n    return self.translate(self.ctx)\n  File \"/home/shikah/.local/lib/python3.10/site-packages/z3/z3.py\", line 6251, in translate\n    return Model(model, target)\nTypeError: Model() takes from 0 to 1 positional arguments but 2 were given\n"}], "mythril_execution_info": {"analysis_duration": 2641110897}}, "sourceFormat": "text", "sourceList": ["Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol", "Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol", "Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol", "Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol", "Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol", "Benchmarks/Study_SamplesSet/f20ae012b0c0d75da3e2d447b3c573d0.sol"], "sourceType": "solidity-file"}]
